import matplotlib.pyplot as pltclass Flowchart:    def __init__(self, rows=3, columns=3, cell_size=1.0, text_size=12):        self.elements = []  # List to store all the elements added to the flowchart        self.connections = []  # List to store connections between elements        self.rows = rows  # Number of rows in the grid        self.columns = columns  # Number of columns in the grid        self.cell_size = cell_size  # Size of each cell in the grid        self.text_size = text_size  # Text size for labels on elements and connections    def grid_to_coords(self, row, col):        """        Convert grid position to actual x, y coordinates on the plot.        """        x = col * self.cell_size  # Calculate x coordinate        y = (self.rows - row) * self.cell_size  # Calculate y coordinate        return x, y    def add_element(self, element, row, col):        """        Add a flowchart element to a specific position on the grid.        """        x, y = self.grid_to_coords(row, col)  # Convert grid position to coordinates        element.set_position(x, y, grid_position=(row, col))  # Set element's position        self.elements.append(element)  # Add element to the list of elements        return element    def connect(self, elem1, elem2, label=""):        """        Create a connection between two elements with an optional label.        """        self.connections.append((elem1, elem2, label))  # Store the connection information    def draw(self, filename):        """        Draw the flowchart with all its elements and connections, and save it to a file.        """        fig, ax = plt.subplots()  # Create a matplotlib figure and axes        ax.set_aspect('equal')  # Set equal aspect ratio for accurate rendering        # Draw each element in the flowchart        for element in self.elements:            element.draw(ax, element.x, element.y, self.text_size)  # Draw element on the axes        # Draw each connection in the flowchart        for elem1, elem2, label in self.connections:            # Calculate offsets for arrow starting and ending points            dx1, dy1 = elem1.arrow_start_offset(elem2)            dx2, dy2 = elem2.arrow_end_offset(elem1)            # Adjust the arrow coordinates with the calculated offsets            x1, y1 = elem1.x + dx1, elem1.y + dy1            x2, y2 = elem2.x + dx2, elem2.y + dy2            # Draw an arrow representing the connection            ax.arrow(x1, y1, x2 - x1, y2 - y1, shape='full', lw=0, length_includes_head=True, head_width=0.02, fc="black", ec="black")            # If a label is provided, draw it near the connection            if label:                horizontal_alignment = 'center' if x1 != x2 else 'left'                ax.text((x1 + x2) / 2, (y1 + y2) / 2, label,                        horizontalalignment=horizontal_alignment, verticalalignment='bottom', fontsize=self.text_size)        ax.axis('off')  # Turn off axis lines and labels        plt.tight_layout()  # Adjust layout for better visual appearance        # Save the flowchart as SVG and PNG files        plt.savefig(f'{filename}.svg', format="svg")        plt.savefig(f'{filename}.png', format="png", dpi = 300)        plt.show()  # Display the flowchart